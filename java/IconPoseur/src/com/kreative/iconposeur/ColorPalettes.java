package com.kreative.iconposeur;

public class ColorPalettes {
	public static int[] createBlackToWhite(int bpp) {
		int colors = (1 << bpp);
		int[] colorTable = new int[colors];
		colors--;
		for (int i = 0; i <= colors; i++) {
			colorTable[i] = ((255 * i / colors) * 0x010101) | 0xFF000000;
		}
		return colorTable;
	}
	
	public static int[] createWhiteToBlack(int bpp) {
		int colors = (1 << bpp);
		int[] colorTable = new int[colors];
		colors--;
		for (int i = 0; i <= colors; i++) {
			colorTable[colors - i] = ((255 * i / colors) * 0x010101) | 0xFF000000;
		}
		return colorTable;
	}
	
	public static int[] createWindows4() {
		return new int[] {
			0xFF000000, 0xFF800000, 0xFF008000, 0xFF808000, 0xFF000080, 0xFF800080, 0xFF008080, 0xFFC0C0C0,
			0xFF808080, 0xFFFF0000, 0xFF00FF00, 0xFFFFFF00, 0xFF0000FF, 0xFFFF00FF, 0xFF00FFFF, 0xFFFFFFFF
		};
	}
	
	public static int[] createMacintosh4() {
		return new int[] {
			0xFFFFFFFF, 0xFFFCF305, 0xFFFF6503, 0xFFDD0907, 0xFFF30885, 0xFF4700A5, 0xFF0000D4, 0xFF02ABEB,
			0xFF1FB814, 0xFF006512, 0xFF562D05, 0xFF91713A, 0xFFC0C0C0, 0xFF808080, 0xFF404040, 0xFF000000
		};
	}
	
	public static int[] createWindows8() {
		return new int[] {
			0xFF000000, 0xFF000080, 0xFF008000, 0xFF008080, 0xFF800000, 0xFF800080, 0xFF808000, 0xFFC0C0C0,
			0xFFC0DCC0, 0xFFF0CAA6, 0xFF002040, 0xFF002060, 0xFF002080, 0xFF0020A0, 0xFF0020C0, 0xFF0020E0,
			0xFF004000, 0xFF004020, 0xFF004040, 0xFF004060, 0xFF004080, 0xFF0040A0, 0xFF0040C0, 0xFF0040E0,
			0xFF006000, 0xFF006020, 0xFF006040, 0xFF006060, 0xFF006080, 0xFF0060A0, 0xFF0060C0, 0xFF0060E0,
			0xFF008000, 0xFF008020, 0xFF008040, 0xFF008060, 0xFF008080, 0xFF0080A0, 0xFF0080C0, 0xFF0080E0,
			0xFF00A000, 0xFF00A020, 0xFF00A040, 0xFF00A060, 0xFF00A080, 0xFF00A0A0, 0xFF00A0C0, 0xFF00A0E0,
			0xFF00C000, 0xFF00C020, 0xFF00C040, 0xFF00C060, 0xFF00C080, 0xFF00C0A0, 0xFF00C0C0, 0xFF00C0E0,
			0xFF00E000, 0xFF00E020, 0xFF00E040, 0xFF00E060, 0xFF00E080, 0xFF00E0A0, 0xFF00E0C0, 0xFF00E0E0,
			0xFF400000, 0xFF400020, 0xFF400040, 0xFF400060, 0xFF400080, 0xFF4000A0, 0xFF4000C0, 0xFF4000E0,
			0xFF402000, 0xFF402020, 0xFF402040, 0xFF402060, 0xFF402080, 0xFF4020A0, 0xFF4020C0, 0xFF4020E0,
			0xFF404000, 0xFF404020, 0xFF404040, 0xFF404060, 0xFF404080, 0xFF4040A0, 0xFF4040C0, 0xFF4040E0,
			0xFF406000, 0xFF406020, 0xFF406040, 0xFF406060, 0xFF406080, 0xFF4060A0, 0xFF4060C0, 0xFF4060E0,
			0xFF408000, 0xFF408020, 0xFF408040, 0xFF408060, 0xFF408080, 0xFF4080A0, 0xFF4080C0, 0xFF4080E0,
			0xFF40A000, 0xFF40A020, 0xFF40A040, 0xFF40A060, 0xFF40A080, 0xFF40A0A0, 0xFF40A0C0, 0xFF40A0E0,
			0xFF40C000, 0xFF40C020, 0xFF40C040, 0xFF40C060, 0xFF40C080, 0xFF40C0A0, 0xFF40C0C0, 0xFF40C0E0,
			0xFF40E000, 0xFF40E020, 0xFF40E040, 0xFF40E060, 0xFF40E080, 0xFF40E0A0, 0xFF40E0C0, 0xFF40E0E0,
			0xFF800000, 0xFF800020, 0xFF800040, 0xFF800060, 0xFF800080, 0xFF8000A0, 0xFF8000C0, 0xFF8000E0,
			0xFF802000, 0xFF802020, 0xFF802040, 0xFF802060, 0xFF802080, 0xFF8020A0, 0xFF8020C0, 0xFF8020E0,
			0xFF804000, 0xFF804020, 0xFF804040, 0xFF804060, 0xFF804080, 0xFF8040A0, 0xFF8040C0, 0xFF8040E0,
			0xFF806000, 0xFF806020, 0xFF806040, 0xFF806060, 0xFF806080, 0xFF8060A0, 0xFF8060C0, 0xFF8060E0,
			0xFF808000, 0xFF808020, 0xFF808040, 0xFF808060, 0xFF808080, 0xFF8080A0, 0xFF8080C0, 0xFF8080E0,
			0xFF80A000, 0xFF80A020, 0xFF80A040, 0xFF80A060, 0xFF80A080, 0xFF80A0A0, 0xFF80A0C0, 0xFF80A0E0,
			0xFF80C000, 0xFF80C020, 0xFF80C040, 0xFF80C060, 0xFF80C080, 0xFF80C0A0, 0xFF80C0C0, 0xFF80C0E0,
			0xFF80E000, 0xFF80E020, 0xFF80E040, 0xFF80E060, 0xFF80E080, 0xFF80E0A0, 0xFF80E0C0, 0xFF80E0E0,
			0xFFC00000, 0xFFC00020, 0xFFC00040, 0xFFC00060, 0xFFC00080, 0xFFC000A0, 0xFFC000C0, 0xFFC000E0,
			0xFFC02000, 0xFFC02020, 0xFFC02040, 0xFFC02060, 0xFFC02080, 0xFFC020A0, 0xFFC020C0, 0xFFC020E0,
			0xFFC04000, 0xFFC04020, 0xFFC04040, 0xFFC04060, 0xFFC04080, 0xFFC040A0, 0xFFC040C0, 0xFFC040E0,
			0xFFC06000, 0xFFC06020, 0xFFC06040, 0xFFC06060, 0xFFC06080, 0xFFC060A0, 0xFFC060C0, 0xFFC060E0,
			0xFFC08000, 0xFFC08020, 0xFFC08040, 0xFFC08060, 0xFFC08080, 0xFFC080A0, 0xFFC080C0, 0xFFC080E0,
			0xFFC0A000, 0xFFC0A020, 0xFFC0A040, 0xFFC0A060, 0xFFC0A080, 0xFFC0A0A0, 0xFFC0A0C0, 0xFFC0A0E0,
			0xFFC0C000, 0xFFC0C020, 0xFFC0C040, 0xFFC0C060, 0xFFC0C080, 0xFFC0C0A0, 0xFFF0FBFF, 0xFFA4A0A0,
			0xFF808080, 0xFF0000FF, 0xFF00FF00, 0xFF00FFFF, 0xFFFF0000, 0xFFFF00FF, 0xFFFFFF00, 0xFFFFFFFF
		};
	}
	
	public static int[] createMacintosh8() {
		return new int[] {
			0xFFFFFFFF, 0xFFFFFFCC, 0xFFFFFF99, 0xFFFFFF66, 0xFFFFFF33, 0xFFFFFF00, 0xFFFFCCFF, 0xFFFFCCCC,
			0xFFFFCC99, 0xFFFFCC66, 0xFFFFCC33, 0xFFFFCC00, 0xFFFF99FF, 0xFFFF99CC, 0xFFFF9999, 0xFFFF9966,
			0xFFFF9933, 0xFFFF9900, 0xFFFF66FF, 0xFFFF66CC, 0xFFFF6699, 0xFFFF6666, 0xFFFF6633, 0xFFFF6600,
			0xFFFF33FF, 0xFFFF33CC, 0xFFFF3399, 0xFFFF3366, 0xFFFF3333, 0xFFFF3300, 0xFFFF00FF, 0xFFFF00CC,
			0xFFFF0099, 0xFFFF0066, 0xFFFF0033, 0xFFFF0000, 0xFFCCFFFF, 0xFFCCFFCC, 0xFFCCFF99, 0xFFCCFF66,
			0xFFCCFF33, 0xFFCCFF00, 0xFFCCCCFF, 0xFFCCCCCC, 0xFFCCCC99, 0xFFCCCC66, 0xFFCCCC33, 0xFFCCCC00,
			0xFFCC99FF, 0xFFCC99CC, 0xFFCC9999, 0xFFCC9966, 0xFFCC9933, 0xFFCC9900, 0xFFCC66FF, 0xFFCC66CC,
			0xFFCC6699, 0xFFCC6666, 0xFFCC6633, 0xFFCC6600, 0xFFCC33FF, 0xFFCC33CC, 0xFFCC3399, 0xFFCC3366,
			0xFFCC3333, 0xFFCC3300, 0xFFCC00FF, 0xFFCC00CC, 0xFFCC0099, 0xFFCC0066, 0xFFCC0033, 0xFFCC0000,
			0xFF99FFFF, 0xFF99FFCC, 0xFF99FF99, 0xFF99FF66, 0xFF99FF33, 0xFF99FF00, 0xFF99CCFF, 0xFF99CCCC,
			0xFF99CC99, 0xFF99CC66, 0xFF99CC33, 0xFF99CC00, 0xFF9999FF, 0xFF9999CC, 0xFF999999, 0xFF999966,
			0xFF999933, 0xFF999900, 0xFF9966FF, 0xFF9966CC, 0xFF996699, 0xFF996666, 0xFF996633, 0xFF996600,
			0xFF9933FF, 0xFF9933CC, 0xFF993399, 0xFF993366, 0xFF993333, 0xFF993300, 0xFF9900FF, 0xFF9900CC,
			0xFF990099, 0xFF990066, 0xFF990033, 0xFF990000, 0xFF66FFFF, 0xFF66FFCC, 0xFF66FF99, 0xFF66FF66,
			0xFF66FF33, 0xFF66FF00, 0xFF66CCFF, 0xFF66CCCC, 0xFF66CC99, 0xFF66CC66, 0xFF66CC33, 0xFF66CC00,
			0xFF6699FF, 0xFF6699CC, 0xFF669999, 0xFF669966, 0xFF669933, 0xFF669900, 0xFF6666FF, 0xFF6666CC,
			0xFF666699, 0xFF666666, 0xFF666633, 0xFF666600, 0xFF6633FF, 0xFF6633CC, 0xFF663399, 0xFF663366,
			0xFF663333, 0xFF663300, 0xFF6600FF, 0xFF6600CC, 0xFF660099, 0xFF660066, 0xFF660033, 0xFF660000,
			0xFF33FFFF, 0xFF33FFCC, 0xFF33FF99, 0xFF33FF66, 0xFF33FF33, 0xFF33FF00, 0xFF33CCFF, 0xFF33CCCC,
			0xFF33CC99, 0xFF33CC66, 0xFF33CC33, 0xFF33CC00, 0xFF3399FF, 0xFF3399CC, 0xFF339999, 0xFF339966,
			0xFF339933, 0xFF339900, 0xFF3366FF, 0xFF3366CC, 0xFF336699, 0xFF336666, 0xFF336633, 0xFF336600,
			0xFF3333FF, 0xFF3333CC, 0xFF333399, 0xFF333366, 0xFF333333, 0xFF333300, 0xFF3300FF, 0xFF3300CC,
			0xFF330099, 0xFF330066, 0xFF330033, 0xFF330000, 0xFF00FFFF, 0xFF00FFCC, 0xFF00FF99, 0xFF00FF66,
			0xFF00FF33, 0xFF00FF00, 0xFF00CCFF, 0xFF00CCCC, 0xFF00CC99, 0xFF00CC66, 0xFF00CC33, 0xFF00CC00,
			0xFF0099FF, 0xFF0099CC, 0xFF009999, 0xFF009966, 0xFF009933, 0xFF009900, 0xFF0066FF, 0xFF0066CC,
			0xFF006699, 0xFF006666, 0xFF006633, 0xFF006600, 0xFF0033FF, 0xFF0033CC, 0xFF003399, 0xFF003366,
			0xFF003333, 0xFF003300, 0xFF0000FF, 0xFF0000CC, 0xFF000099, 0xFF000066, 0xFF000033, 0xFFEE0000,
			0xFFDD0000, 0xFFBB0000, 0xFFAA0000, 0xFF880000, 0xFF770000, 0xFF550000, 0xFF440000, 0xFF220000,
			0xFF110000, 0xFF00EE00, 0xFF00DD00, 0xFF00BB00, 0xFF00AA00, 0xFF008800, 0xFF007700, 0xFF005500,
			0xFF004400, 0xFF002200, 0xFF001100, 0xFF0000EE, 0xFF0000DD, 0xFF0000BB, 0xFF0000AA, 0xFF000088,
			0xFF000077, 0xFF000055, 0xFF000044, 0xFF000022, 0xFF000011, 0xFFEEEEEE, 0xFFDDDDDD, 0xFFBBBBBB,
			0xFFAAAAAA, 0xFF888888, 0xFF777777, 0xFF555555, 0xFF444444, 0xFF222222, 0xFF111111, 0xFF000000
		};
	}
}
